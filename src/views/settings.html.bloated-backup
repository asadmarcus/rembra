<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Rembra</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: transparent;
            color: #e5e5e7;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            overflow: hidden;
        }

        .settings-container {
            display: flex;
            width: 900px;
            height: 650px;
            background: rgba(28, 28, 30, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar {
            width: 260px;
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.4));
            padding: 24px;
            display: flex;
            flex-direction: column;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 16px;
        }

        .logo {
            width: 36px;
            height: 36px;
            background: linear-gradient(135deg, #007AFF, #5856D6);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 16px;
        }

        .header-text h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .header-text p {
            margin: 2px 0 0 0;
            font-size: 12px;
            color: #8e8e93;
        }

        .user-card {
            background: rgba(58, 58, 60, 0.6);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            border: 0.5px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #007AFF, #5856D6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
        }

        .user-details h4 {
            margin: 0;
            font-size: 14px;
            font-weight: 600;
        }

        .user-details p {
            margin: 2px 0 0 0;
            font-size: 11px;
            color: #8e8e93;
        }

        .beta-badge {
            background: linear-gradient(135deg, #FF9500, #FF3B30);
            color: white;
            font-size: 8px;
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 4px;
            margin-left: 6px;
        }

        .sign-out-btn {
            width: 100%;
            padding: 8px;
            background: rgba(72, 72, 74, 0.6);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            color: #e5e5e7;
            cursor: pointer;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 10px 18px;
            border-radius: 10px;
            cursor: pointer;
            margin-bottom: 4px;
            transition: all 0.2s ease;
        }

        .nav-item.active {
            background: linear-gradient(to right, #007AFF, rgba(0, 122, 255, 0.8));
            color: white;
        }

        .nav-item:hover:not(.active) {
            background: rgba(255, 255, 255, 0.1);
        }

        .nav-icon {
            width: 18px;
            font-size: 15px;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .content-header {
            padding: 24px 32px;
            background: rgba(44, 44, 46, 0.8);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            -webkit-app-region: drag;
        }

        .content-title h2 {
            margin: 0 0 4px 0;
            font-size: 28px;
            font-weight: 600;
        }

        .content-title p {
            margin: 0;
            font-size: 14px;
            color: #8e8e93;
        }

        .close-btn {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: rgba(72, 72, 74, 0.6);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 13px;
            color: #8e8e93;
            -webkit-app-region: no-drag;
        }

        .content-body {
            flex: 1;
            padding: 24px;
            overflow-y: auto;
        }

        .section {
            margin-bottom: 24px;
        }

        .section h3 {
            margin: 0 0 16px 0;
            font-size: 18px;
            font-weight: 600;
        }

        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 8px;
            margin-bottom: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .setting-label {
            font-size: 14px;
            font-weight: 500;
        }

        .toggle {
            width: 44px;
            height: 24px;
            background: #ccc;
            border-radius: 12px;
            position: relative;
            cursor: pointer;
            transition: background 0.3s;
        }

        .toggle.active {
            background: #007AFF;
        }

        .toggle-slider {
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            position: absolute;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .toggle.active .toggle-slider {
            transform: translateX(20px);
        }

        .select {
            padding: 6px 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            background: rgba(58, 58, 60, 0.8);
            color: #e5e5e7;
            font-size: 12px;
        }

        .select option {
            background: rgba(28, 28, 30, 0.95);
            color: #e5e5e7;
        }

        .btn {
            padding: 8px 16px;
            border: 1px solid #007AFF;
            border-radius: 6px;
            background: #007AFF;
            color: white;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn:hover {
            background: #0056CC;
        }

        .btn-secondary {
            background: transparent;
            color: #007AFF;
        }

        .btn-secondary:hover {
            background: rgba(0, 122, 255, 0.1);
        }

        .stat-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        .stat-card {
            padding: 16px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .stat-icon {
            font-size: 16px;
            margin-bottom: 8px;
        }

        .stat-value {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 2px;
        }

        .stat-label {
            font-size: 12px;
            color: #8e8e93;
        }

        /* Enhanced Analytics Styles */
        .analytics-section {
            margin-bottom: 32px;
        }

        .metric-grid {
            display: grid;
            gap: 16px;
        }

        .metric-card {
            padding: 20px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .metric-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .metric-header span:first-child {
            font-size: 14px;
            color: #e5e5e7;
        }

        .metric-value {
            font-size: 18px;
            font-weight: 600;
            color: #007AFF;
        }

        .metric-bar {
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 8px;
        }

        .metric-fill {
            height: 100%;
            background: linear-gradient(90deg, #007AFF, #5856D6);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .metric-subtitle {
            font-size: 12px;
            color: #8e8e93;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #8e8e93;
        }

        .empty-state-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .client-card {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 16px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 12px;
            margin-bottom: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .client-avatar {
            width: 50px;
            height: 50px;
            background: rgba(0, 122, 255, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: 600;
            color: #007AFF;
        }

        .client-info {
            flex: 1;
        }

        .client-info h4 {
            margin: 0 0 4px 0;
            font-size: 16px;
            font-weight: 500;
        }

        .client-info p {
            margin: 0;
            font-size: 14px;
            color: #8e8e93;
        }

        .client-actions {
            display: flex;
            gap: 8px;
        }

        .usage-card {
            padding: 12px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 16px;
            backdrop-filter: blur(10px);
        }

        .usage-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 12px;
        }

        .usage-progress {
            height: 6px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 4px;
        }

        .usage-progress-bar {
            height: 100%;
            background: #007AFF;
            transition: width 0.3s ease;
        }

        .usage-progress-bar.warning {
            background: #FF9500;
        }

        .usage-progress-bar.danger {
            background: #FF3B30;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: rgba(28, 28, 30, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 12px;
            padding: 24px;
            width: 500px;
            max-height: 600px;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
            color: #e5e5e7;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 4px;
            font-size: 14px;
            font-weight: 500;
        }

        .form-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            font-size: 14px;
            box-sizing: border-box;
            background: rgba(58, 58, 60, 0.8);
            color: #e5e5e7;
        }

        .form-textarea {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            font-size: 14px;
            min-height: 80px;
            resize: vertical;
            box-sizing: border-box;
            background: rgba(58, 58, 60, 0.8);
            color: #e5e5e7;
        }

        /* Enhanced Client Management Styles */
        .client-card {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 16px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 12px;
            margin-bottom: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .client-card:hover {
            background: rgba(58, 58, 60, 0.8);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .client-avatar {
            width: 50px;
            height: 50px;
            background: rgba(0, 122, 255, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: 600;
            color: #007AFF;
            flex-shrink: 0;
        }

        .client-info {
            flex: 1;
        }

        .client-info h4 {
            margin: 0 0 4px 0;
            font-size: 16px;
            font-weight: 500;
        }

        .client-info p {
            margin: 0;
            font-size: 14px;
            color: #8e8e93;
        }

        .client-stats {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-right: 16px;
        }

        .client-stat {
            text-align: center;
        }

        .client-stat-value {
            font-size: 16px;
            font-weight: 600;
            color: #007AFF;
        }

        .client-stat-label {
            font-size: 11px;
            color: #8e8e93;
            margin-top: 2px;
        }

        .client-actions {
            display: flex;
            gap: 8px;
            flex-shrink: 0;
        }

        .client-action-btn {
            padding: 6px 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            background: rgba(58, 58, 60, 0.8);
            color: #e5e5e7;
            font-size: 11px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .client-action-btn:hover {
            background: rgba(72, 72, 74, 0.8);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .client-action-btn.primary {
            background: #007AFF;
            border-color: #007AFF;
            color: white;
        }

        .client-action-btn.primary:hover {
            background: #0056CC;
        }

        .client-action-btn.danger {
            background: #FF3B30;
            border-color: #FF3B30;
            color: white;
        }

        .client-action-btn.danger:hover {
            background: #D70015;
        }

        /* Brief History Modal */
        .brief-history-modal {
            width: 700px;
            max-height: 80vh;
        }

        .brief-stats-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 16px;
            margin-bottom: 24px;
        }

        .brief-stat-card {
            padding: 16px;
            background: rgba(58, 58, 60, 0.6);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
        }

        .brief-stat-icon {
            font-size: 20px;
            margin-bottom: 8px;
        }

        .brief-stat-value {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .brief-stat-label {
            font-size: 12px;
            color: #8e8e93;
        }

        .brief-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .brief-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: rgba(58, 58, 60, 0.4);
            border-radius: 8px;
            margin-bottom: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .brief-item:hover {
            background: rgba(58, 58, 60, 0.6);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .brief-icon {
            width: 32px;
            height: 32px;
            background: rgba(138, 43, 226, 0.2);
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: #8A2BE2;
            flex-shrink: 0;
        }

        .brief-details {
            flex: 1;
        }

        .brief-title {
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 2px;
        }

        .brief-meta {
            font-size: 12px;
            color: #8e8e93;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .brief-topic {
            background: rgba(138, 43, 226, 0.2);
            color: #8A2BE2;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
        }

        .brief-date {
            color: #8e8e93;
        }

        .brief-actions {
            display: flex;
            gap: 4px;
        }

        .brief-action-btn {
            padding: 4px 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            background: rgba(58, 58, 60, 0.8);
            color: #e5e5e7;
            font-size: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .brief-action-btn:hover {
            background: rgba(72, 72, 74, 0.8);
        }

        /* Brief Detail Modal */
        .brief-detail-modal {
            width: 600px;
            max-height: 80vh;
        }

        .brief-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 16px;
            padding-bottom: 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .brief-header-info h3 {
            margin: 0 0 4px 0;
            font-size: 20px;
            font-weight: 600;
        }

        .brief-header-meta {
            font-size: 12px;
            color: #8e8e93;
        }

        .brief-content {
            background: rgba(58, 58, 60, 0.4);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 16px;
            max-height: 400px;
            overflow-y: auto;
            font-size: 14px;
            line-height: 1.6;
            color: #e5e5e7;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Enhanced Brief Content Markdown Styling */
        .brief-content h1,
        .brief-content h2,
        .brief-content h3,
        .brief-content h4,
        .brief-content h5,
        .brief-content h6 {
            color: #ffffff;
            font-weight: 600;
            margin: 16px 0 12px 0;
            line-height: 1.3;
        }

        .brief-content h1 {
            font-size: 20px;
            color: #007AFF;
            border-bottom: 2px solid rgba(0, 122, 255, 0.3);
            padding-bottom: 8px;
        }

        .brief-content h2 {
            font-size: 18px;
            color: #007AFF;
            border-bottom: 1px solid rgba(0, 122, 255, 0.2);
            padding-bottom: 6px;
        }

        .brief-content h3 {
            font-size: 16px;
            color: #FF9500;
        }

        .brief-content h4 {
            font-size: 15px;
            color: #FF9500;
        }

        .brief-content h5,
        .brief-content h6 {
            font-size: 14px;
            color: #34C759;
        }

        .brief-content p {
            margin: 8px 0;
            line-height: 1.6;
        }

        .brief-content strong {
            color: #ffffff;
            font-weight: 600;
        }

        .brief-content em {
            color: #FF9500;
            font-style: italic;
        }

        .brief-content ul,
        .brief-content ol {
            margin: 12px 0;
            padding-left: 20px;
        }

        .brief-content li {
            margin: 6px 0;
            line-height: 1.5;
        }

        .brief-content ul li {
            list-style-type: none;
            position: relative;
        }

        .brief-content ul li:before {
            content: "•";
            color: #007AFF;
            font-weight: bold;
            position: absolute;
            left: -15px;
        }

        .brief-content ol li {
            list-style-type: decimal;
            color: #e5e5e7;
        }

        .brief-content blockquote {
            border-left: 3px solid #007AFF;
            padding-left: 16px;
            margin: 16px 0;
            color: #8e8e93;
            font-style: italic;
        }

        .brief-content code {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            padding: 2px 6px;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            font-size: 12px;
            color: #34C759;
        }

        .brief-content pre {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            padding: 12px;
            margin: 12px 0;
            overflow-x: auto;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.4;
        }

        .brief-content pre code {
            background: none;
            border: none;
            padding: 0;
            color: #34C759;
        }

        .brief-content hr {
            border: none;
            height: 1px;
            background: rgba(255, 255, 255, 0.2);
            margin: 20px 0;
        }

        .brief-content a {
            color: #007AFF;
            text-decoration: none;
        }

        .brief-content a:hover {
            text-decoration: underline;
        }

        /* Special styling for brief sections */
        .brief-content .section-divider {
            border: none;
            height: 2px;
            background: linear-gradient(to right, transparent, rgba(0, 122, 255, 0.3), transparent);
            margin: 24px 0;
        }

        .brief-content .highlight {
            background: rgba(255, 149, 0, 0.2);
            border-left: 3px solid #FF9500;
            padding: 8px 12px;
            margin: 12px 0;
            border-radius: 0 6px 6px 0;
        }

        .brief-detail-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }
    </style>
</head>

<body>
    <div class="settings-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="header">
                <div class="logo">R</div>
                <div class="header-text">
                    <h3>Rembra</h3>
                    <p>Settings</p>
                </div>
            </div>

            <div class="user-card">
                <div class="user-info">
                    <div class="user-avatar" id="userAvatar">U</div>
                    <div class="user-details">
                        <h4 id="userName">User <span class="beta-badge">BETA</span></h4>
                        <p id="userEmail">user@example.com</p>
                    </div>
                </div>
                <button class="sign-out-btn" onclick="signOut()">Sign Out</button>
            </div>

            <nav>
                <div class="nav-item active" onclick="switchTab('sessions')">
                    <span>Sessions</span>
                </div>
                <div class="nav-item" onclick="switchTab('clients')">
                    <span>Clients</span>
                </div>
                <div class="nav-item" onclick="switchTab('analytics')">
                    <span>Analytics</span>
                </div>
                <div class="nav-item" onclick="switchTab('account')">
                    <span>Account</span>
                </div>
                <div class="nav-item" onclick="switchTab('usage')">
                    <span>Usage</span>
                </div>
                <div class="nav-item" onclick="switchTab('preferences')">
                    <span>Preferences</span>
                </div>
            </nav>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="content-header">
                <div class="content-title">
                    <h2 id="contentTitle">Sessions</h2>
                    <p id="contentSubtitle">View and manage your recordings</p>
                </div>
                <button class="close-btn" onclick="closeSettings()">×</button>
            </div>

            <div class="content-body" id="contentBody">
                <!-- Content will be dynamically loaded here -->
            </div>
        </div>
    </div>

    <!-- Add Client Modal -->
    <div class="modal" id="addClientModal">
        <div class="modal-content">
            <h3>Add New Client</h3>
            <form id="clientForm">
                <div class="form-group">
                    <label class="form-label">Name *</label>
                    <input type="text" class="form-input" id="clientName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Company *</label>
                    <input type="text" class="form-input" id="clientCompany" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="clientEmail">
                </div>
                <div class="form-group">
                    <label class="form-label">Phone</label>
                    <input type="tel" class="form-input" id="clientPhone">
                </div>
                <div class="form-group">
                    <label class="form-label">Industry</label>
                    <input type="text" class="form-input" id="clientIndustry">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea class="form-textarea" id="clientNotes"></textarea>
                </div>
                <div style="display: flex; gap: 12px; justify-content: flex-end;">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn">Add Client</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Change Email Modal -->
    <div class="modal" id="changeEmailModal">
        <div class="modal-content">
            <h3>Change Email</h3>
            <form id="changeEmailForm">
                <div class="form-group">
                    <label class="form-label">Current Password *</label>
                    <input type="password" class="form-input" id="currentPasswordEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">New Email *</label>
                    <input type="email" class="form-input" id="newEmail" required>
                </div>
                <div style="display: flex; gap: 12px; justify-content: flex-end;">
                    <button type="button" class="btn btn-secondary"
                        onclick="closeModal('changeEmailModal')">Cancel</button>
                    <button type="submit" class="btn">Update Email</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div class="modal" id="changePasswordModal">
        <div class="modal-content">
            <h3>Change Password</h3>
            <form id="changePasswordForm">
                <div class="form-group">
                    <label class="form-label">Current Password *</label>
                    <input type="password" class="form-input" id="currentPassword" required>
                </div>
                <div class="form-group">
                    <label class="form-label">New Password *</label>
                    <input type="password" class="form-input" id="newPassword" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Confirm New Password *</label>
                    <input type="password" class="form-input" id="confirmPassword" required>
                </div>
                <div style="display: flex; gap: 12px; justify-content: flex-end;">
                    <button type="button" class="btn btn-secondary"
                        onclick="closeModal('changePasswordModal')">Cancel</button>
                    <button type="submit" class="btn">Update Password</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Account Modal -->
    <div class="modal" id="deleteAccountModal">
        <div class="modal-content">
            <h3 style="color: #FF3B30;">Delete Account</h3>
            <p style="color: #8e8e93; margin-bottom: 16px;">This action cannot be undone. All your data will be
                permanently deleted.</p>
            <form id="deleteAccountForm">
                <div class="form-group">
                    <label class="form-label">Current Password *</label>
                    <input type="password" class="form-input" id="deletePassword" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Type "DELETE" to confirm *</label>
                    <input type="text" class="form-input" id="deleteConfirm" required>
                </div>
                <div style="display: flex; gap: 12px; justify-content: flex-end;">
                    <button type="button" class="btn btn-secondary"
                        onclick="closeModal('deleteAccountModal')">Cancel</button>
                    <button type="submit" class="btn" style="background: #FF3B30; border-color: #FF3B30;">Delete
                        Account</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Brief History Modal -->
    <div class="modal" id="briefHistoryModal">
        <div class="modal-content brief-history-modal">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <div>
                    <h3 id="briefHistoryTitle">Brief History</h3>
                    <p id="briefHistorySubtitle" style="color: #8e8e93; margin: 4px 0 0 0;"></p>
                </div>
                <button class="close-btn" onclick="closeModal('briefHistoryModal')">×</button>
            </div>

            <div class="brief-stats-grid">
                <div class="brief-stat-card">
                    <div class="brief-stat-icon">📄</div>
                    <div class="brief-stat-value" id="totalBriefs">0</div>
                    <div class="brief-stat-label">Total Briefs</div>
                </div>
                <div class="brief-stat-card">
                    <div class="brief-stat-icon">🏷️</div>
                    <div class="brief-stat-value" id="totalTopics">0</div>
                    <div class="brief-stat-label">Topics</div>
                </div>
                <div class="brief-stat-card">
                    <div class="brief-stat-icon">🔄</div>
                    <div class="brief-stat-value" id="totalFollowups">0</div>
                    <div class="brief-stat-label">Follow-ups</div>
                </div>
                <div class="brief-stat-card">
                    <div class="brief-stat-icon">📅</div>
                    <div class="brief-stat-value" id="recentDate">-</div>
                    <div class="brief-stat-label">Recent</div>
                </div>
            </div>

            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                <h4>Meeting Briefs</h4>
                <button class="btn btn-secondary" onclick="clearAllBriefs()"
                    style="font-size: 11px; padding: 4px 8px;">Clear All</button>
            </div>

            <div class="brief-list" id="briefsList">
                <div class="empty-state">
                    <h4>No briefs found</h4>
                    <p>Generate meeting briefs to see them here</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Brief Detail Modal -->
    <div class="modal" id="briefDetailModal">
        <div class="modal-content brief-detail-modal">
            <div class="brief-header">
                <div class="brief-header-info">
                    <h3 id="briefDetailTitle">Brief Title</h3>
                    <div class="brief-header-meta">
                        <span id="briefDetailClient">Client • Company</span>
                    </div>
                </div>
                <button class="close-btn" onclick="closeModal('briefDetailModal')">×</button>
            </div>

            <div style="display: flex; gap: 16px; margin-bottom: 16px;">
                <div style="flex: 1;">
                    <div style="font-size: 12px; color: #8e8e93; margin-bottom: 4px;">Created</div>
                    <div id="briefDetailDate" style="font-size: 14px;">-</div>
                </div>
                <div style="flex: 1;">
                    <div style="font-size: 12px; color: #8e8e93; margin-bottom: 4px;">Objective</div>
                    <div id="briefDetailObjective" style="font-size: 14px;">-</div>
                </div>
            </div>

            <div style="margin-bottom: 16px;">
                <h4>Meeting Brief</h4>
                <div class="brief-content" id="briefDetailContent">
                    Brief content will appear here...
                </div>
            </div>

            <div class="brief-detail-actions">
                <button class="btn btn-secondary" onclick="copyBriefToClipboard()">Copy Brief</button>
                <button class="btn" style="background: #FF3B30; border-color: #FF3B30;" onclick="deleteBrief()">Delete
                    Brief</button>
            </div>
        </div>
    </div>

    <script>
        const { ipcRenderer } = require('electron');
        let currentTab = 'sessions';
        let clients = [];

        // Tab content templates
        const tabContent = {
            sessions: {
                title: 'Sessions',
                subtitle: 'View and manage your recordings',
                content: `
                    <div class="section">
                        <h3>Transcription Sessions</h3>
                        <div id="sessionsList">
                            <div class="empty-state">
                                <h3>No recordings yet</h3>
                                <p>Click the Listen button to start recording</p>
                            </div>
                        </div>
                    </div>
                `
            },
            clients: {
                title: 'Clients',
                subtitle: 'Manage your client information',
                content: `
                    <div class="section">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                            <h3>Client Management</h3>
                            <button class="btn" onclick="showAddClientModal()">Add Client</button>
                        </div>
                        <p style="color: #8e8e93; margin-bottom: 20px;">Manage your clients for meeting briefs</p>
                        <div id="clientsList">
                            <div class="empty-state">
                                <h3>No clients added</h3>
                                <p>Add clients to generate personalized briefs</p>
                                <button class="btn" onclick="showAddClientModal()">Add Your First Client</button>
                            </div>
                        </div>
                    </div>
                `
            },
            analytics: {
                title: 'Analytics',
                subtitle: 'Meeting insights and statistics',
                content: `
                    <div class="stat-grid">
                        <div class="stat-card">
                            <div class="stat-value">0</div>
                            <div class="stat-label">Total Sessions</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">0m</div>
                            <div class="stat-label">Total Duration</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">0m</div>
                            <div class="stat-label">Avg Session</div>
                        </div>
                    </div>
                    <div class="empty-state">
                        <h3>No meeting data yet</h3>
                        <p>Start recording meetings to see analytics</p>
                    </div>
                `
            },
            account: {
                title: 'Account',
                subtitle: 'Profile and authentication',
                content: `
                    <div class="section">
                        <h3>Profile Information</h3>
                        <div class="setting-item">
                            <span class="setting-label">Email:</span>
                            <span id="accountEmail">Loading...</span>
                        </div>
                        <div class="setting-item">
                            <span class="setting-label">User ID:</span>
                            <span id="accountUserId">Loading...</span>
                        </div>
                    </div>

                    <div class="section">
                        <h3>Account Security</h3>
                        <div class="setting-item">
                            <span class="setting-label">Change Email</span>
                            <button class="btn btn-secondary" onclick="showChangeEmailModal()">Update</button>
                        </div>
                        <div class="setting-item">
                            <span class="setting-label">Change Password</span>
                            <button class="btn btn-secondary" onclick="showChangePasswordModal()">Update</button>
                        </div>
                        <div class="setting-item">
                            <span class="setting-label">Reset Password</span>
                            <button class="btn btn-secondary" onclick="sendPasswordReset()">Send Reset Email</button>
                        </div>
                    </div>

                    <div class="section">
                        <h3>Account Actions</h3>
                        <div class="setting-item">
                            <span class="setting-label">Delete Account</span>
                            <button class="btn" style="background: #FF3B30; border-color: #FF3B30;" onclick="showDeleteAccountModal()">Delete</button>
                        </div>
                    </div>
                `
            },
            usage: {
                title: 'Usage & Billing',
                subtitle: 'Track your usage and manage subscription',
                content: `
                    <div class="section">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                            <h3>Beta Usage Limits</h3>
                            <span class="beta-badge">BETA ACCESS</span>
                        </div>
                        
                        <div id="usageCards">
                            <!-- Usage cards will be dynamically loaded -->
                        </div>

                        <div style="padding: 16px; background: rgba(0, 122, 255, 0.1); border-radius: 12px; border: 1px solid rgba(0, 122, 255, 0.3); margin-top: 24px;">
                            <h4 style="margin: 0 0 8px 0;">Ready to Upgrade?</h4>
                            <p style="margin: 0 0 12px 0; font-size: 14px; color: #666;">Get unlimited access to all Rembra features with our upcoming subscription plans.</p>
                            <button class="btn" onclick="showSubscriptionPlans()">View Subscription Plans</button>
                        </div>
                    </div>
                `
            },
            preferences: {
                title: 'Preferences',
                subtitle: 'App settings and preferences',
                content: `
                    <div class="section">
                        <h3>Recording Preferences</h3>
                        <div class="setting-item">
                            <span class="setting-label">Auto-save recordings</span>
                            <div class="toggle active" onclick="toggleSetting(this)">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                        <div class="setting-item">
                            <span class="setting-label">Audio Quality</span>
                            <select class="select">
                                <option>Standard</option>
                                <option selected>High</option>
                                <option>Lossless</option>
                            </select>
                        </div>
                        <div class="setting-item">
                            <span class="setting-label">Transcription Language</span>
                            <select class="select">
                                <option selected>English</option>
                                <option>Spanish</option>
                                <option>French</option>
                                <option>German</option>
                            </select>
                        </div>
                    </div>

                    <div class="section">
                        <h3>Notifications</h3>
                        <div class="setting-item">
                            <span class="setting-label">Enable notifications</span>
                            <div class="toggle active" onclick="toggleSetting(this)">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <h3>AI Processing</h3>
                        <div class="setting-item">
                            <div>
                                <div class="setting-label">Rembra AI Integration</div>
                                <div style="font-size: 12px; color: #8e8e93;">Powered by Rembra API for intelligent meeting analysis</div>
                            </div>
                            <span style="color: #34C759;">✓</span>
                        </div>
                    </div>



                    <div class="section">
                        <h3>Privacy Settings</h3>
                        <div class="setting-item">
                            <div>
                                <div class="setting-label">Hide from screen sharing & screenshots</div>
                                <div style="font-size: 12px; color: #8e8e93;">When enabled, Rembra will be hidden from screen recording, screenshots, and proctored exams</div>
                                <div class="privacy-status" style="font-size: 10px; color: #007AFF; margin-top: 4px;">Visible mode enabled</div>
                            </div>
                            <div class="toggle" onclick="toggleSetting(this)">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>
                `
            }
        };

        function switchTab(tab) {
            currentTab = tab;

            // Update active nav item
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
                if (item.textContent.trim().toLowerCase() === tab) {
                    item.classList.add('active');
                }
            });

            // Update content
            const content = tabContent[tab];
            document.getElementById('contentTitle').textContent = content.title;
            document.getElementById('contentSubtitle').textContent = content.subtitle;
            document.getElementById('contentBody').innerHTML = content.content;

            // Load specific tab data
            if (tab === 'clients') {
                loadClients();
            } else if (tab === 'sessions') {
                loadSessions();
            } else if (tab === 'analytics') {
                loadAnalytics();
            } else if (tab === 'account') {
                loadUserData();
            } else if (tab === 'usage') {
                loadUsageData();
            }

            async function loadAnalytics() {
                console.log('📊 Loading analytics...');
                try {
                    const sessions = JSON.parse(localStorage.getItem('transcription_sessions') || '[]');
                    const totalSessions = sessions.length;
                    const totalDuration = sessions.reduce((sum, session) => sum + (session.duration || 0), 0);
                    const totalMinutes = Math.round(totalDuration / 1000 / 60);
                    const uniqueSpeakers = new Set();
                    sessions.forEach(session => {
                        if (session.speakers) {
                            session.speakers.forEach(speaker => uniqueSpeakers.add(speaker));
                        }
                    });

                    // Update analytics display
                    const analyticsContainer = document.getElementById('contentBody');
                    if (analyticsContainer) {
                        // Calculate additional analytics
                        const avgSessionLength = totalSessions > 0 ? Math.round(totalMinutes / totalSessions) : 0;
                        const totalWords = sessions.reduce((sum, session) => {
                            if (session.transcript && Array.isArray(session.transcript)) {
                                return sum + session.transcript.reduce((wordSum, t) => wordSum + (t.text ? t.text.split(' ').length : 0), 0);
                            }
                            return sum;
                        }, 0);
                        
                        const recentSessions = sessions.filter(session => {
                            const sessionDate = new Date(session.startTime);
                            const sevenDaysAgo = new Date();
                            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                            return sessionDate >= sevenDaysAgo;
                        }).length;

                        // Get usage data for different features
                        const briefsGenerated = parseInt(localStorage.getItem('briefsGenerated') || '0');
                        const aiAssistUsage = parseInt(localStorage.getItem('aiAssistUsage') || '0');
                        const emailsGenerated = parseInt(localStorage.getItem('emailsGenerated') || '0');
                        
                        analyticsContainer.innerHTML = `
                            <div class="analytics-section">
                                <h3 style="margin: 0 0 20px 0; color: #007AFF;">📊 Session Analytics</h3>
                                <div class="stat-grid">
                                    <div class="stat-card">
                                        <div class="stat-icon">🎙️</div>
                                        <div class="stat-value">${totalSessions}</div>
                                        <div class="stat-label">Total Sessions</div>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-icon">⏱️</div>
                                        <div class="stat-value">${totalMinutes}</div>
                                        <div class="stat-label">Minutes Transcribed</div>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-icon">👥</div>
                                        <div class="stat-value">${uniqueSpeakers.size}</div>
                                        <div class="stat-label">Unique Speakers</div>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-icon">📈</div>
                                        <div class="stat-value">${avgSessionLength}m</div>
                                        <div class="stat-label">Avg Session Length</div>
                                    </div>
                                </div>
                            </div>

                            <div class="analytics-section" style="margin-top: 32px;">
                                <h3 style="margin: 0 0 20px 0; color: #FF9500;">🚀 Feature Usage</h3>
                                <div class="stat-grid">
                                    <div class="stat-card">
                                        <div class="stat-icon">📝</div>
                                        <div class="stat-value">${briefsGenerated}</div>
                                        <div class="stat-label">Briefs Generated</div>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-icon">🤖</div>
                                        <div class="stat-value">${aiAssistUsage}</div>
                                        <div class="stat-label">AI Assist Uses</div>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-icon">📧</div>
                                        <div class="stat-value">${emailsGenerated}</div>
                                        <div class="stat-label">Emails Generated</div>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-icon">🔥</div>
                                        <div class="stat-value">${recentSessions}</div>
                                        <div class="stat-label">Sessions (7 days)</div>
                                    </div>
                                </div>
                            </div>

                            <div class="analytics-section" style="margin-top: 32px;">
                                <h3 style="margin: 0 0 20px 0; color: #34C759;">📈 Productivity Metrics</h3>
                                <div class="metric-grid">
                                    <div class="metric-card">
                                        <div class="metric-header">
                                            <span>Words Transcribed</span>
                                            <span class="metric-value">${totalWords.toLocaleString()}</span>
                                        </div>
                                        <div class="metric-bar">
                                            <div class="metric-fill" style="width: ${Math.min(100, (totalWords / 10000) * 100)}%;"></div>
                                        </div>
                                        <div class="metric-subtitle">Goal: 10,000 words</div>
                                    </div>
                                    
                                    <div class="metric-card">
                                        <div class="metric-header">
                                            <span>Monthly Minutes</span>
                                            <span class="metric-value">${totalMinutes}</span>
                                        </div>
                                        <div class="metric-bar">
                                            <div class="metric-fill" style="width: ${Math.min(100, (totalMinutes / 500) * 100)}%; background: linear-gradient(90deg, #FF9500, #FF3B30);"></div>
                                        </div>
                                        <div class="metric-subtitle">Beta unlimited</div>
                                    </div>
                                    
                                    <div class="metric-card">
                                        <div class="metric-header">
                                            <span>Meeting Efficiency</span>
                                            <span class="metric-value">${uniqueSpeakers.size > 0 ? Math.round((totalWords / totalMinutes) || 0) : 0}</span>
                                        </div>
                                        <div class="metric-bar">
                                            <div class="metric-fill" style="width: ${Math.min(100, ((totalWords / totalMinutes) / 100) * 100)}%; background: linear-gradient(90deg, #34C759, #007AFF);"></div>
                                        </div>
                                        <div class="metric-subtitle">Words per minute</div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('❌ Failed to load analytics:', error);
                }
            }

            async function loadUsageData() {
                console.log('📈 Loading usage data...');
                try {
                    const sessions = JSON.parse(localStorage.getItem('transcription_sessions') || '[]');
                    const currentMonth = new Date().getMonth();
                    const currentYear = new Date().getFullYear();
                    
                    const thisMonthSessions = sessions.filter(session => {
                        const sessionDate = new Date(session.startTime);
                        return sessionDate.getMonth() === currentMonth && sessionDate.getFullYear() === currentYear;
                    });

                    const monthlyMinutes = thisMonthSessions.reduce((sum, session) => sum + Math.round((session.duration || 0) / 1000 / 60), 0);
                    
                    // Beta limits - much more reasonable
                    const transcriptionLimit = 60; // 60 minutes per month
                    const briefLimit = 10; // 10 briefs per month
                    const emailLimit = 15; // 15 emails per month
                    const aiAssistLimit = 25; // 25 AI assists per month
                    
                    const transcriptionUsage = Math.min((monthlyMinutes / transcriptionLimit) * 100, 100);
                    
                    // Get usage from localStorage (these would be tracked by actual usage)
                    const briefsUsed = parseInt(localStorage.getItem('briefs_used_this_month') || '0');
                    const emailsUsed = parseInt(localStorage.getItem('emails_used_this_month') || '0');
                    const aiAssistsUsed = parseInt(localStorage.getItem('ai_assists_used_this_month') || '0');

                    // Update usage display in the usageCards div
                    const usageCards = document.getElementById('usageCards');
                    if (usageCards) {
                        usageCards.innerHTML = `
                            <div class="usage-card">
                                <div class="usage-header">
                                    <span style="font-weight: 500;">🎙️ Transcription</span>
                                </div>
                                <div style="font-size: 12px; color: #8e8e93; margin-bottom: 8px;">${monthlyMinutes} / ${transcriptionLimit} min</div>
                                <div class="usage-progress">
                                    <div class="usage-progress-bar ${transcriptionUsage > 80 ? 'warning' : ''}" style="width: ${transcriptionUsage}%"></div>
                                </div>
                                <div style="font-size: 10px; color: #007AFF;">${Math.round(transcriptionUsage)}% used</div>
                            </div>

                            <div class="usage-card">
                                <div class="usage-header">
                                    <span style="font-weight: 500;">📋 Brief Generation</span>
                                </div>
                                <div style="font-size: 12px; color: #8e8e93; margin-bottom: 8px;">${briefsUsed} / ${briefLimit}</div>
                                <div class="usage-progress">
                                    <div class="usage-progress-bar ${(briefsUsed/briefLimit)*100 > 80 ? 'warning' : ''}" style="width: ${(briefsUsed/briefLimit)*100}%"></div>
                                </div>
                                <div style="font-size: 10px; color: #007AFF;">${Math.round((briefsUsed/briefLimit)*100)}% used</div>
                            </div>

                            <div class="usage-card">
                                <div class="usage-header">
                                    <span style="font-weight: 500;">📧 Email Generation</span>
                                </div>
                                <div style="font-size: 12px; color: #8e8e93; margin-bottom: 8px;">${emailsUsed} / ${emailLimit}</div>
                                <div class="usage-progress">
                                    <div class="usage-progress-bar ${(emailsUsed/emailLimit)*100 > 80 ? 'warning' : ''}" style="width: ${(emailsUsed/emailLimit)*100}%"></div>
                                </div>
                                <div style="font-size: 10px; color: #007AFF;">${Math.round((emailsUsed/emailLimit)*100)}% used</div>
                            </div>

                            <div class="usage-card">
                                <div class="usage-header">
                                    <span style="font-weight: 500;">🤖 AI Assist</span>
                                </div>
                                <div style="font-size: 12px; color: #8e8e93; margin-bottom: 8px;">${aiAssistsUsed} / ${aiAssistLimit}</div>
                                <div class="usage-progress">
                                    <div class="usage-progress-bar ${(aiAssistsUsed/aiAssistLimit)*100 > 80 ? 'warning' : ''}" style="width: ${(aiAssistsUsed/aiAssistLimit)*100}%"></div>
                                </div>
                                <div style="font-size: 10px; color: #007AFF;">${Math.round((aiAssistsUsed/aiAssistLimit)*100)}% used</div>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('❌ Failed to load usage data:', error);
                }
            }

            async function loadClients() {
                try {
                    clients = await ipcRenderer.invoke('get-clients');
                    console.log('Loaded clients from IPC:', clients);
                    renderClients();
                } catch (error) {
                    console.error('Failed to load clients:', error);
                    clients = [];
                    renderClients();
                }
            }

            function showAddClientModal() {
                document.getElementById('addClientModal').style.display = 'flex';
            }

            function toggleSetting(toggle) {
                toggle.classList.toggle('active');

                // Check if this is the privacy toggle
                const settingItem = toggle.closest('.setting-item');
                const label = settingItem.querySelector('.setting-label');

                if (label && label.textContent.includes('Hide from screen sharing')) {
                    const isEnabled = toggle.classList.contains('active');
                    ipcRenderer.invoke('set-content-protection', isEnabled);

                    // Update status text
                    const statusText = settingItem.querySelector('.privacy-status');
                    if (statusText) {
                        statusText.textContent = isEnabled ? 'Privacy mode enabled' : 'Visible mode enabled';
                        statusText.style.color = isEnabled ? '#34C759' : '#007AFF';
                    }
                }
            }

            function showAddClientModal() {
                document.getElementById('addClientModal').style.display = 'flex';
            }



            function showChangeEmailModal() {
                document.getElementById('changeEmailModal').style.display = 'flex';
            }

            function showChangePasswordModal() {
                document.getElementById('changePasswordModal').style.display = 'flex';
            }

            function showDeleteAccountModal() {
                document.getElementById('deleteAccountModal').style.display = 'flex';
            }

            async function sendPasswordReset() {
                const email = document.getElementById('accountEmail').textContent;
                if (email && email !== 'Loading...' && email !== 'Not available') {
                    try {
                        const result = await ipcRenderer.invoke('send-password-reset', email);
                        if (result.success) {
                            alert('Password reset email sent! Check your inbox.');
                        } else {
                            alert('Error: ' + result.error);
                        }
                    } catch (error) {
                        alert('Error sending password reset email');
                    }
                } else {
                    alert('Unable to send reset email. Please try again later.');
                }
            }







            function loadSessions() {
                const sessions = JSON.parse(localStorage.getItem('transcription_sessions') || '[]');
                const sessionsList = document.getElementById('sessionsList');

                if (!sessionsList) return;

                if (sessions.length === 0) {
                    sessionsList.innerHTML = `
                    <div class="empty-state">
                        <h3>No recordings yet</h3>
                        <p>Click the Listen button to start recording</p>
                    </div>
                `;
                } else {
                    sessionsList.innerHTML = sessions.map(session => `
                    <div class="client-card" data-session-id="${session.id}" style="cursor: pointer;">
                        <div class="client-avatar">🎙️</div>
                        <div class="client-info">
                            <h4>${session.title}</h4>
                            <p>${new Date(session.startTime).toLocaleString()}</p>
                            <p style="font-size: 12px; color: #007AFF;">${Math.round(session.duration / 1000 / 60)} min • ${session.speakers.length} speaker(s) • ${session.audioSourceLabel || 'Microphone'}</p>
                        </div>
                        <div class="client-actions">
                            <button class="btn btn-secondary delete-session-btn" data-session-id="${session.id}">Delete</button>
                        </div>
                    </div>
                `).join('');
                }
            }

            function viewSession(sessionId) {
                console.log('🔍 viewSession called with ID:', sessionId);
                try {
                    const sessions = JSON.parse(localStorage.getItem('transcription_sessions') || '[]');
                    console.log('🔍 Found sessions:', sessions.length);
                    const session = sessions.find(s => s.id === sessionId);
                    console.log('🔍 Found session:', !!session);

                    if (session) {
                        showSessionModal(session);
                    } else {
                        console.error('❌ Session not found:', sessionId);
                    }
                } catch (error) {
                    console.error('❌ Error in viewSession:', error);
                }
            }

            function showSessionModal(session) {
                const transcript = session.transcript.map(t => `${t.speaker}: ${t.text}`).join('\n\n');

                // Create modal HTML
                const modalHtml = `
                <div class="modal" id="sessionModal" style="display: flex;">
                    <div class="modal-content" style="max-width: 800px; max-height: 80vh;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 1px solid rgba(255,255,255,0.1); padding-bottom: 16px;">
                            <h3 style="margin: 0; color: #007AFF;">📝 ${session.title}</h3>
                            <button onclick="closeSessionModal()" style="background: none; border: none; color: #8e8e93; font-size: 20px; cursor: pointer;">×</button>
                        </div>
                        
                        <div style="margin-bottom: 20px;">
                            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px; margin-bottom: 16px;">
                                <div style="background: rgba(58, 58, 60, 0.6); padding: 12px; border-radius: 8px;">
                                    <div style="font-size: 12px; color: #8e8e93; margin-bottom: 4px;">Date & Time</div>
                                    <div style="font-size: 14px;">${new Date(session.startTime).toLocaleString()}</div>
                                </div>
                                <div style="background: rgba(58, 58, 60, 0.6); padding: 12px; border-radius: 8px;">
                                    <div style="font-size: 12px; color: #8e8e93; margin-bottom: 4px;">Duration</div>
                                    <div style="font-size: 14px;">${Math.round(session.duration / 1000 / 60)} minutes</div>
                                </div>
                                <div style="background: rgba(58, 58, 60, 0.6); padding: 12px; border-radius: 8px;">
                                    <div style="font-size: 12px; color: #8e8e93; margin-bottom: 4px;">Audio Source</div>
                                    <div style="font-size: 14px;">${session.audioSourceLabel || 'Microphone'}</div>
                                </div>
                                <div style="background: rgba(58, 58, 60, 0.6); padding: 12px; border-radius: 8px;">
                                    <div style="font-size: 12px; color: #8e8e93; margin-bottom: 4px;">Speakers</div>
                                    <div style="font-size: 14px;">${session.speakers.join(', ')}</div>
                                </div>
                            </div>
                        </div>

                        <div style="margin-bottom: 20px;">
                            <h4 style="margin: 0 0 12px 0; color: #FF9500;">📋 Meeting Summary</h4>
                            <div style="background: rgba(255, 149, 0, 0.1); border: 1px solid rgba(255, 149, 0, 0.3); border-radius: 8px; padding: 16px; white-space: pre-wrap; line-height: 1.5; font-size: 14px;">${session.summary || 'No summary available'}</div>
                        </div>

                        <div>
                            <h4 style="margin: 0 0 12px 0; color: #34C759;">🎙️ Full Transcript</h4>
                            <div style="background: rgba(58, 58, 60, 0.6); border-radius: 8px; padding: 16px; max-height: 300px; overflow-y: auto; white-space: pre-wrap; line-height: 1.6; font-size: 13px; font-family: monospace;">${transcript || 'No transcript available'}</div>
                        </div>

                        <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 20px; padding-top: 16px; border-top: 1px solid rgba(255,255,255,0.1);">
                            <button onclick="exportSession('${session.id}')" class="btn btn-secondary">Export</button>
                            <button onclick="closeSessionModal()" class="btn">Close</button>
                        </div>
                    </div>
                </div>
            `;

                // Remove existing modal if any
                const existingModal = document.getElementById('sessionModal');
                if (existingModal) {
                    existingModal.remove();
                }

                // Add modal to body
                document.body.insertAdjacentHTML('beforeend', modalHtml);
            }

            function closeSessionModal() {
                const modal = document.getElementById('sessionModal');
                if (modal) {
                    modal.remove();
                }
            }

            function exportSession(sessionId) {
                const sessions = JSON.parse(localStorage.getItem('transcription_sessions') || '[]');
                const session = sessions.find(s => s.id === sessionId);

                if (session) {
                    const transcript = session.transcript.map(t => `${t.speaker}: ${t.text}`).join('\n\n');
                    const exportContent = `REMBRA MEETING TRANSCRIPT
                
=====================================

Session: ${session.title}
Date: ${new Date(session.startTime).toLocaleString()}
Duration: ${Math.round(session.duration / 1000 / 60)} minutes
Audio Source: ${session.audioSourceLabel || 'Microphone'}
Speakers: ${session.speakers.join(', ')}

SUMMARY:
${session.summary || 'No summary available'}

FULL TRANSCRIPT:
${transcript || 'No transcript available'}

=====================================
Exported from Rembra on ${new Date().toLocaleString()}`;

                    // Create and download file
                    const blob = new Blob([exportContent], { type: 'text/plain' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `rembra-session-${session.id}-${new Date(session.startTime).toISOString().split('T')[0]}.txt`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    console.log('Session exported successfully');
                }
            }

            function deleteSession(sessionId) {
                console.log('🔍 deleteSession called with ID:', sessionId);
                try {
                    if (confirm('Delete this session?')) {
                        let sessions = JSON.parse(localStorage.getItem('transcription_sessions') || '[]');
                        console.log('🔍 Sessions before delete:', sessions.length);
                        sessions = sessions.filter(s => s.id !== sessionId);
                        console.log('🔍 Sessions after delete:', sessions.length);
                        localStorage.setItem('transcription_sessions', JSON.stringify(sessions));
                        loadSessions();
                        console.log('✅ Session deleted successfully');
                    }
                } catch (error) {
                    console.error('❌ Error deleting session:', error);
                }
            }



            function signOut() {
                ipcRenderer.invoke('logout').then(() => {
                    closeSettings();
                });
            }

            function closeSettings() {
                console.log('🔍 closeSettings called');
                try {
                    // Clean up listeners before closing
                    cleanupListeners();
                    ipcRenderer.send('close-settings');
                } catch (error) {
                    console.error('❌ Error closing settings:', error);
                }
            }

            function showSubscriptionPlans() {
                // Create subscription plans modal
                const modalHtml = `
                <div class="modal" id="subscriptionModal" style="display: flex;">
                    <div class="modal-content" style="max-width: 700px;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 1px solid rgba(255,255,255,0.1); padding-bottom: 16px;">
                            <h3 style="margin: 0; color: #007AFF;">💎 Subscription Plans</h3>
                            <button onclick="closeSubscriptionModal()" style="background: none; border: none; color: #8e8e93; font-size: 20px; cursor: pointer;">×</button>
                        </div>
                        
                        <div style="margin-bottom: 20px;">
                            <div style="background: rgba(255, 149, 0, 0.1); border: 1px solid rgba(255, 149, 0, 0.3); border-radius: 8px; padding: 16px; margin-bottom: 20px;">
                                <h4 style="margin: 0 0 8px 0; color: #FF9500;">🚀 You're on Beta!</h4>
                                <p style="margin: 0; font-size: 14px; line-height: 1.5;">You currently have access to all premium features during our beta period. Subscription plans will be available soon with even more advanced features!</p>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">
                                <!-- Free Plan -->
                                <div style="background: rgba(58, 58, 60, 0.6); border-radius: 12px; padding: 20px; border: 1px solid rgba(255,255,255,0.1);">
                                    <h4 style="margin: 0 0 8px 0; color: #8e8e93;">Free</h4>
                                    <div style="font-size: 24px; font-weight: bold; margin-bottom: 16px;">$0<span style="font-size: 14px; color: #8e8e93;">/month</span></div>
                                    <ul style="list-style: none; padding: 0; margin: 0;">
                                        <li style="padding: 4px 0; font-size: 14px;">✅ 30 minutes/month</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Basic transcription</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Text export</li>
                                        <li style="padding: 4px 0; font-size: 14px; color: #8e8e93;">❌ Speaker diarization</li>
                                        <li style="padding: 4px 0; font-size: 14px; color: #8e8e93;">❌ AI summaries</li>
                                    </ul>
                                </div>
                                
                                <!-- Pro Plan -->
                                <div style="background: linear-gradient(135deg, rgba(0, 122, 255, 0.1), rgba(88, 86, 214, 0.1)); border-radius: 12px; padding: 20px; border: 1px solid #007AFF; position: relative;">
                                    <div style="position: absolute; top: -8px; right: 16px; background: #007AFF; color: white; padding: 4px 8px; border-radius: 4px; font-size: 10px; font-weight: bold;">COMING SOON</div>
                                    <h4 style="margin: 0 0 8px 0; color: #007AFF;">Pro</h4>
                                    <div style="font-size: 24px; font-weight: bold; margin-bottom: 16px;">$19<span style="font-size: 14px; color: #8e8e93;">/month</span></div>
                                    <ul style="list-style: none; padding: 0; margin: 0;">
                                        <li style="padding: 4px 0; font-size: 14px;">✅ 10 hours/month</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Advanced transcription</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Speaker diarization</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ AI summaries</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Multiple export formats</li>
                                    </ul>
                                </div>
                                
                                <!-- Enterprise Plan -->
                                <div style="background: rgba(58, 58, 60, 0.6); border-radius: 12px; padding: 20px; border: 1px solid rgba(255,255,255,0.1);">
                                    <h4 style="margin: 0 0 8px 0; color: #FF9500;">Enterprise</h4>
                                    <div style="font-size: 24px; font-weight: bold; margin-bottom: 16px;">$99<span style="font-size: 14px; color: #8e8e93;">/month</span></div>
                                    <ul style="list-style: none; padding: 0; margin: 0;">
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Unlimited usage</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Priority processing</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Custom integrations</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Advanced analytics</li>
                                        <li style="padding: 4px 0; font-size: 14px;">✅ Dedicated support</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <div style="display: flex; gap: 12px; justify-content: center; margin-top: 20px; padding-top: 16px; border-top: 1px solid rgba(255,255,255,0.1);">
                            <button onclick="joinWaitlist()" class="btn" style="background: linear-gradient(135deg, #007AFF, #5856D6);">Join Waitlist</button>
                            <button onclick="closeSubscriptionModal()" class="btn btn-secondary">Close</button>
                        </div>
                    </div>
                </div>
            `;

                // Remove existing modal if any
                const existingModal = document.getElementById('subscriptionModal');
                if (existingModal) {
                    existingModal.remove();
                }

                // Add modal to body
                document.body.insertAdjacentHTML('beforeend', modalHtml);
            }

            function closeSubscriptionModal() {
                const modal = document.getElementById('subscriptionModal');
                if (modal) {
                    modal.remove();
                }
            }

            function joinWaitlist() {
                alert('Thanks for your interest! We\'ll notify you when subscription plans are available. In the meantime, enjoy full access during the beta period!');
                closeSubscriptionModal();
            }

            // Event listeners
            document.getElementById('clientForm').addEventListener('submit', (e) => {
                e.preventDefault();
                addClient();
            });

            document.getElementById('changeEmailForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const currentPassword = document.getElementById('currentPasswordEmail').value;
                const newEmail = document.getElementById('newEmail').value;

                try {
                    const result = await ipcRenderer.invoke('change-email', { currentPassword, newEmail });
                    if (result.success) {
                        alert('Email updated successfully!');
                        closeModal('changeEmailModal');
                        loadUserData();
                    } else {
                        alert('Error: ' + result.error);
                    }
                } catch (error) {
                    alert('Error updating email');
                }
            });

            document.getElementById('changePasswordForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                if (newPassword !== confirmPassword) {
                    alert('New passwords do not match');
                    return;
                }

                try {
                    const result = await ipcRenderer.invoke('change-password', { currentPassword, newPassword });
                    if (result.success) {
                        alert('Password updated successfully!');
                        closeModal('changePasswordModal');
                    } else {
                        alert('Error: ' + result.error);
                    }
                } catch (error) {
                    alert('Error updating password');
                }
            });

            document.getElementById('deleteAccountForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const password = document.getElementById('deletePassword').value;
                const confirm = document.getElementById('deleteConfirm').value;

                if (confirm !== 'DELETE') {
                    alert('Please type "DELETE" to confirm');
                    return;
                }

                if (window.confirm('Are you absolutely sure? This cannot be undone.')) {
                    try {
                        const result = await ipcRenderer.invoke('delete-account', { password });
                        if (result.success) {
                            alert('Account deleted successfully');
                            closeModal('deleteAccountModal');
                            closeSettings();
                        } else {
                            alert('Error: ' + result.error);
                        }
                    } catch (error) {
                        alert('Error deleting account');
                    }
                }
            });

            // Clean up existing listeners to prevent memory leaks
            function cleanupListeners() {
                try {
                    ipcRenderer.removeAllListeners('clients-updated');
                    ipcRenderer.removeAllListeners('sessions-updated');
                    ipcRenderer.removeAllListeners('user-data-updated');
                    ipcRenderer.removeAllListeners('subscription-updated');
                    console.log('🧹 All IPC listeners cleaned up');
                } catch (error) {
                    console.log('No existing listeners to remove:', error);
                }
            }

            // Clean up when window unloads
            window.addEventListener('beforeunload', cleanupListeners);

            // Listen for client updates (with cleanup)
            cleanupListeners(); // Remove any existing listeners first
            ipcRenderer.on('clients-updated', () => {
                console.log('Received clients-updated event in settings');
                if (currentTab === 'clients') {
                    setTimeout(() => loadClients(), 100);
                }
            });

            // Initialize
            window.addEventListener('DOMContentLoaded', () => {
                console.log('🔍 Settings panel DOM loaded');
                
                // Make functions globally accessible
                window.viewSession = viewSession;
                window.deleteSession = deleteSession;
                window.closeSettings = closeSettings;
                window.closeSessionModal = closeSessionModal;
                window.showSubscriptionPlans = showSubscriptionPlans;
                
                // Add event delegation for dynamic content
                document.addEventListener('click', (e) => {
                    console.log('🔍 Click detected on:', e.target, 'Classes:', e.target.className);
                    
                    // Handle session clicks
                    const sessionCard = e.target.closest('.client-card[data-session-id]');
                    if (sessionCard && !e.target.closest('.client-actions')) {
                        const sessionId = sessionCard.getAttribute('data-session-id');
                        console.log('🔍 Session card clicked:', sessionId);
                        try {
                            viewSession(sessionId);
                        } catch (error) {
                            console.error('❌ Error viewing session:', error);
                        }
                        return;
                    }
                    
                    // Handle delete button clicks
                    if (e.target.matches('.delete-session-btn')) {
                        e.stopPropagation();
                        const sessionId = e.target.getAttribute('data-session-id');
                        console.log('🔍 Delete button clicked:', sessionId);
                        try {
                            deleteSession(sessionId);
                        } catch (error) {
                            console.error('❌ Error deleting session:', error);
                        }
                        return;
                    }
                    
                    // Handle close button
                    if (e.target.matches('.close-btn')) {
                        console.log('🔍 Close button clicked');
                        try {
                            closeSettings();
                        } catch (error) {
                            console.error('❌ Error closing settings:', error);
                        }
                        return;
                    }
                    
                    // Handle nav item clicks
                    const navItem = e.target.closest('.nav-item');
                    if (navItem) {
                        const tabName = navItem.textContent.trim().toLowerCase();
                        console.log('🔍 Nav item clicked:', tabName);
                        try {
                            switchTab(tabName);
                        } catch (error) {
                            console.error('❌ Error switching tab:', error);
                        }
                        return;
                    }
                });
                
                switchTab('sessions');
                loadUserData();
                loadPrivacySettings();
                
                console.log('🔍 Settings panel initialized');
            });

            // Listen for session updates (with cleanup)
            cleanupListeners(); // Remove any existing listeners first
            ipcRenderer.on('sessions-updated', () => {
                if (currentTab === 'sessions') {
                    loadSessions();
                }
            });

            async function loadPrivacySettings() {
                try {
                    const result = await ipcRenderer.invoke('get-content-protection');
                    if (result.enabled) {
                        // Find and activate the privacy toggle
                        const privacyToggle = document.querySelector('.setting-item .toggle');
                        if (privacyToggle && privacyToggle.closest('.setting-item').querySelector('.setting-label').textContent.includes('Hide from screen sharing')) {
                            privacyToggle.classList.add('active');
                            const statusText = privacyToggle.closest('.setting-item').querySelector('.privacy-status');
                            if (statusText) {
                                statusText.textContent = 'Privacy mode enabled';
                                statusText.style.color = '#34C759';
                            }
                        }
                    }
                } catch (error) {
                    console.error('Failed to load privacy settings:', error);
                }
            }

            async function loadUserData() {
                console.log('🔍 Loading user data...');
                try {
                    // Show loading state
                    document.getElementById('accountEmail').textContent = 'Loading...';
                    document.getElementById('accountUserId').textContent = 'Loading...';
                    
                    const userData = await ipcRenderer.invoke('get-user-data');
                    console.log('🔍 User data response:', userData);
                    
                    if (userData.success && userData.user) {
                        console.log('✅ User data loaded successfully');
                        document.getElementById('accountEmail').textContent = userData.user.email || 'Not available';
                        document.getElementById('accountUserId').textContent = userData.user.uid || 'Not available';

                        // Update sidebar user info
                        document.getElementById('userName').innerHTML = `${getUserDisplayName(userData.user.email)} <span class="beta-badge">BETA</span>`;
                        document.getElementById('userEmail').textContent = userData.user.email || 'user@example.com';
                        document.getElementById('userAvatar').textContent = getUserInitials(userData.user.email);
                    } else {
                        console.log('❌ User data not available:', userData);
                        
                        // Try alternative method - check localStorage for cached user data
                        const cachedUser = localStorage.getItem('currentUser');
                        if (cachedUser) {
                            try {
                                const user = JSON.parse(cachedUser);
                                console.log('🔍 Using cached user data:', user);
                                document.getElementById('accountEmail').textContent = user.email || 'Not available';
                                document.getElementById('accountUserId').textContent = user.uid || 'Not available';
                                
                                // Update sidebar user info
                                document.getElementById('userName').innerHTML = `${getUserDisplayName(user.email)} <span class="beta-badge">BETA</span>`;
                                document.getElementById('userEmail').textContent = user.email || 'user@example.com';
                                document.getElementById('userAvatar').textContent = getUserInitials(user.email);
                                return;
                            } catch (parseError) {
                                console.error('❌ Error parsing cached user data:', parseError);
                            }
                        }
                        
                        document.getElementById('accountEmail').textContent = 'Not available';
                        document.getElementById('accountUserId').textContent = 'Not available';
                    }
                } catch (error) {
                    console.error('❌ Failed to load user data:', error);
                    document.getElementById('accountEmail').textContent = 'Error loading';
                    document.getElementById('accountUserId').textContent = 'Error loading';
                }
            }

            function getUserDisplayName(email) {
                if (email) {
                    return email.split('@')[0].charAt(0).toUpperCase() + email.split('@')[0].slice(1);
                }
                return 'User';
            }

            function getUserInitials(email) {
                const displayName = getUserDisplayName(email);
                return displayName.substring(0, 2).toUpperCase();
            }

            // Enhanced Client Management Functions
            let selectedClientForBriefs = null;
            let selectedBriefForDetail = null;

            // Markdown to HTML converter for brief content
            function convertMarkdownToHTML(markdown) {
                if (!markdown) return '';

                let html = markdown
                    // Headers
                    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
                    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
                    .replace(/^# (.*$)/gim, '<h1>$1</h1>')

                    // Bold text
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')

                    // Italic text
                    .replace(/\*(.*?)\*/g, '<em>$1</em>')

                    // Horizontal rules
                    .replace(/^---$/gim, '<hr class="section-divider">')
                    .replace(/^-{3,}$/gim, '<hr class="section-divider">')

                    // Bullet points (handle nested levels)
                    .replace(/^\* (.*$)/gim, '<li>$1</li>')
                    .replace(/^- (.*$)/gim, '<li>$1</li>')

                    // Line breaks and paragraphs
                    .replace(/\n\n/g, '</p><p>')
                    .replace(/\n/g, '<br>');

                // Wrap in paragraph tags if not already wrapped
                if (!html.startsWith('<h') && !html.startsWith('<li') && !html.startsWith('<p')) {
                    html = '<p>' + html + '</p>';
                }

                // Wrap consecutive list items in ul tags
                html = html.replace(/(<li>.*?<\/li>)(\s*<li>.*?<\/li>)*/g, function (match) {
                    return '<ul>' + match + '</ul>';
                });

                // Clean up empty paragraphs
                html = html.replace(/<p><\/p>/g, '');
                html = html.replace(/<p><br><\/p>/g, '');

                return html;
            }

            function renderClients() {
                console.log('Rendering clients:', clients);

                const clientsList = document.getElementById('clientsList');
                if (!clientsList) return;

                if (clients.length === 0) {
                    clientsList.innerHTML = `
                    <div class="empty-state">
                        <h3>No clients added</h3>
                        <p>Add clients to generate personalized briefs</p>
                        <button class="btn" onclick="showAddClientModal()">Add Your First Client</button>
                    </div>
                `;
                } else {
                    clientsList.innerHTML = clients.map(client => {
                        const briefCount = client.briefHistory ? client.briefHistory.length : 0;
                        const topicCount = client.briefHistory ?
                            [...new Set(client.briefHistory.map(b => b.topic || 'General'))].length : 0;
                        const followupCount = client.briefHistory ?
                            client.briefHistory.filter(b => b.isFollowUp).length : 0;

                        return `
                        <div class="client-card" onclick="showBriefHistory('${client.id}')">
                            <div class="client-avatar">${client.name.charAt(0).toUpperCase()}</div>
                            <div class="client-info">
                                <h4>${client.name}</h4>
                                <p>${client.company}</p>
                                ${client.industry ? `<p style="font-size: 12px; color: #007AFF;">${client.industry}</p>` : ''}
                            </div>
                            <div class="client-stats">
                                <div class="client-stat">
                                    <div class="client-stat-value">${briefCount}</div>
                                    <div class="client-stat-label">Briefs</div>
                                </div>
                            </div>
                            <div class="client-actions">
                                <button class="client-action-btn primary" onclick="event.stopPropagation(); showBriefHistory('${client.id}')">
                                    Briefs (${briefCount})
                                </button>
                                <button class="client-action-btn" onclick="event.stopPropagation(); editClient('${client.id}')">Edit</button>
                                <button class="client-action-btn danger" onclick="event.stopPropagation(); deleteClient('${client.id}')">Delete</button>
                            </div>
                        </div>
                    `;
                    }).join('');
                }
            }

            function showBriefHistory(clientId) {
                const client = clients.find(c => c.id === clientId);
                if (!client) return;

                selectedClientForBriefs = client;

                // Update modal title and subtitle
                document.getElementById('briefHistoryTitle').textContent = 'Brief History';
                document.getElementById('briefHistorySubtitle').textContent = `${client.name} at ${client.company}`;

                // Calculate statistics
                const briefHistory = client.briefHistory || [];
                const totalBriefs = briefHistory.length;
                const topics = [...new Set(briefHistory.map(b => b.topic || 'General'))];
                const totalTopics = topics.length;
                const totalFollowups = briefHistory.filter(b => b.isFollowUp).length;
                const recentDate = briefHistory.length > 0 ?
                    new Date(Math.max(...briefHistory.map(b => new Date(b.createdAt)))).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) :
                    '-';

                // Update statistics
                document.getElementById('totalBriefs').textContent = totalBriefs;
                document.getElementById('totalTopics').textContent = totalTopics;
                document.getElementById('totalFollowups').textContent = totalFollowups;
                document.getElementById('recentDate').textContent = recentDate;

                // Render briefs list
                const briefsList = document.getElementById('briefsList');
                if (briefHistory.length === 0) {
                    briefsList.innerHTML = `
                    <div class="empty-state">
                        <h4>No briefs found</h4>
                        <p>Generate meeting briefs to see them here</p>
                    </div>
                `;
                } else {
                    const sortedBriefs = briefHistory.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                    briefsList.innerHTML = sortedBriefs.map(brief => `
                    <div class="brief-item" onclick="showBriefDetail('${brief.id}')">
                        <div class="brief-icon">📄</div>
                        <div class="brief-details">
                            <div class="brief-title">${brief.title || brief.objective}</div>
                            <div class="brief-meta">
                                <span class="brief-topic">${brief.topic || 'General'}</span>
                                <span class="brief-date">${new Date(brief.createdAt).toLocaleDateString()} at ${new Date(brief.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                            </div>
                        </div>
                        <div class="brief-actions">
                            <button class="brief-action-btn" onclick="event.stopPropagation(); copyBriefToClipboard('${brief.id}')">Copy</button>
                            <button class="brief-action-btn" onclick="event.stopPropagation(); deleteBrief('${brief.id}')">Delete</button>
                        </div>
                    </div>
                `).join('');
                }

                // Show modal
                document.getElementById('briefHistoryModal').style.display = 'flex';
            }

            function showBriefDetail(briefId) {
                if (!selectedClientForBriefs) return;

                const brief = selectedClientForBriefs.briefHistory.find(b => b.id === briefId);
                if (!brief) return;

                selectedBriefForDetail = brief;

                // Update modal content
                document.getElementById('briefDetailTitle').textContent = brief.title || brief.objective;
                document.getElementById('briefDetailClient').textContent = `${selectedClientForBriefs.name} • ${selectedClientForBriefs.company}`;
                document.getElementById('briefDetailDate').textContent = new Date(brief.createdAt).toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                document.getElementById('briefDetailObjective').textContent = brief.objective || brief.title;
                document.getElementById('briefDetailContent').innerHTML = convertMarkdownToHTML(brief.content);

                // Show modal
                document.getElementById('briefDetailModal').style.display = 'flex';
            }

            function copyBriefToClipboard(briefId) {
                if (!selectedClientForBriefs) return;

                const brief = briefId ?
                    selectedClientForBriefs.briefHistory.find(b => b.id === briefId) :
                    selectedBriefForDetail;

                if (!brief) return;

                const briefText = `REMBRA MEETING BRIEF
=====================================

Client: ${selectedClientForBriefs.name}
Company: ${selectedClientForBriefs.company}
Date: ${new Date(brief.createdAt).toLocaleDateString()}
Objective: ${brief.objective || brief.title}
Topic: ${brief.topic || 'General'}

BRIEF CONTENT:
${brief.content}

=====================================
Generated by Rembra on ${new Date(brief.createdAt).toLocaleString()}`;

                navigator.clipboard.writeText(briefText).then(() => {
                    // Show success feedback
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = 'Copied!';
                    btn.style.background = '#34C759';
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.style.background = '';
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy brief:', err);
                    alert('Failed to copy brief to clipboard');
                });
            }

            function deleteBrief(briefId) {
                if (!selectedClientForBriefs) return;

                if (!confirm('Are you sure you want to delete this brief? This action cannot be undone.')) {
                    return;
                }

                // Remove brief from client's history
                selectedClientForBriefs.briefHistory = selectedClientForBriefs.briefHistory.filter(b => b.id !== briefId);

                // Update client in the main clients array
                const clientIndex = clients.findIndex(c => c.id === selectedClientForBriefs.id);
                if (clientIndex !== -1) {
                    clients[clientIndex] = selectedClientForBriefs;
                }

                // Save to backend
                ipcRenderer.invoke('update-client', selectedClientForBriefs.id, { briefHistory: selectedClientForBriefs.briefHistory })
                    .then(() => {
                        // Refresh the brief history modal
                        showBriefHistory(selectedClientForBriefs.id);
                        // Close detail modal if it was open
                        closeModal('briefDetailModal');
                        // Refresh clients list
                        renderClients();
                    })
                    .catch(error => {
                        console.error('Failed to delete brief:', error);
                        alert('Failed to delete brief. Please try again.');
                    });
            }

            function clearAllBriefs() {
                if (!selectedClientForBriefs) return;

                if (!confirm(`Are you sure you want to delete all ${selectedClientForBriefs.briefHistory.length} briefs for ${selectedClientForBriefs.name}? This action cannot be undone.`)) {
                    return;
                }

                // Clear all briefs
                selectedClientForBriefs.briefHistory = [];

                // Update client in the main clients array
                const clientIndex = clients.findIndex(c => c.id === selectedClientForBriefs.id);
                if (clientIndex !== -1) {
                    clients[clientIndex] = selectedClientForBriefs;
                }

                // Save to backend
                ipcRenderer.invoke('update-client', selectedClientForBriefs.id, { briefHistory: [] })
                    .then(() => {
                        // Refresh the brief history modal
                        showBriefHistory(selectedClientForBriefs.id);
                        // Refresh clients list
                        renderClients();
                    })
                    .catch(error => {
                        console.error('Failed to clear briefs:', error);
                        alert('Failed to clear briefs. Please try again.');
                    });
            }

            function editClient(clientId) {
                const client = clients.find(c => c.id === clientId);
                if (!client) return;

                // Populate form with existing data
                document.getElementById('clientName').value = client.name;
                document.getElementById('clientCompany').value = client.company;
                document.getElementById('clientEmail').value = client.email || '';
                document.getElementById('clientPhone').value = client.phone || '';
                document.getElementById('clientIndustry').value = client.industry || '';
                document.getElementById('clientNotes').value = client.notes || '';

                // Change form title and button
                document.querySelector('#addClientModal h3').textContent = 'Edit Client';
                document.querySelector('#addClientModal button[type="submit"]').textContent = 'Update Client';

                // Store client ID for update
                document.getElementById('clientForm').dataset.editingId = clientId;

                // Show modal
                document.getElementById('addClientModal').style.display = 'flex';
            }

            // Override the existing addClient function to handle both add and edit
            async function addClient() {
                const form = document.getElementById('clientForm');
                const editingId = form.dataset.editingId;

                const clientData = {
                    name: document.getElementById('clientName').value.trim(),
                    company: document.getElementById('clientCompany').value.trim(),
                    email: document.getElementById('clientEmail').value.trim(),
                    phone: document.getElementById('clientPhone').value.trim(),
                    industry: document.getElementById('clientIndustry').value.trim(),
                    notes: document.getElementById('clientNotes').value.trim()
                };

                if (!clientData.name || !clientData.company) {
                    alert('Name and Company are required');
                    return;
                }

                try {
                    if (editingId) {
                        // Update existing client
                        await ipcRenderer.invoke('update-client', editingId, clientData);
                    } else {
                        // Add new client
                        await ipcRenderer.invoke('add-client', clientData);
                    }

                    closeModal('addClientModal');
                    loadClients();

                    // Reset form
                    form.reset();
                    delete form.dataset.editingId;
                    document.querySelector('#addClientModal h3').textContent = 'Add New Client';
                    document.querySelector('#addClientModal button[type="submit"]').textContent = 'Add Client';
                } catch (error) {
                    console.error('Failed to save client:', error);
                    alert('Failed to save client. Please try again.');
                }
            }

            // Enhanced deleteClient function
            async function deleteClient(clientId) {
                if (!confirm('Are you sure you want to delete this client? This will also delete all their briefs.')) {
                    return;
                }

                try {
                    await ipcRenderer.invoke('delete-client', clientId);
                    loadClients();
                } catch (error) {
                    console.error('Failed to delete client:', error);
                    alert('Failed to delete client. Please try again.');
                }
            }

            // Override closeModal to handle form reset
            function closeModal(modalId = 'addClientModal') {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.style.display = 'none';

                    // Reset add client form if closing that modal
                    if (modalId === 'addClientModal') {
                        const form = document.getElementById('clientForm');
                        form.reset();
                        delete form.dataset.editingId;
                        document.querySelector('#addClientModal h3').textContent = 'Add New Client';
                        document.querySelector('#addClientModal button[type="submit"]').textContent = 'Add Client';
                    }
                }
            }
        }
    </script>
</body>

</html>